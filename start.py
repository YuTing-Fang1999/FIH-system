# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# pyuic5 -x UI.ui -o UI.py

from PyQt5 import QtCore, QtGui, QtWidgets
from fft.controller import MainWindow_controller as fft_window
from colorcheck.controller import MainWindow_controller as colorcheck_window
from sharpness.controller import MainWindow_controller as sharpness_window
from dxo_dead_leaves.controller import MainWindow_controller as dxo_dead_leaves_window


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.resize(400, 0)
        centralwidget = QtWidgets.QWidget(MainWindow)
        verticalLayout_parent = QtWidgets.QVBoxLayout(centralwidget)

        name = ["頻譜分析", "colorcheck", "sharpness/noise", "dxo_dead_leaves"]
        self.pushButton = []
        for i in range(len(name)):
            pushButton = QtWidgets.QPushButton(centralwidget)
            pushButton.setText(name[i])
            verticalLayout_parent.addWidget(pushButton)
            self.pushButton.append(pushButton)

        MainWindow.setCentralWidget(centralwidget)
        MainWindow.setStyleSheet("QMainWindow {background-color: rgb(66, 66, 66);}"
                                 """
                                QPushButton {
                                    font-size:14pt; 
                                    font-family:微軟正黑體; 
                                    font-weight: bold; 
                                    letter-spacing: 4pt;
                                    background-color:rgb(255, 170, 0);
                                }
                                """
                                 )

        # Sub Window
        self.fft_window = fft_window()
        self.colorcheck_window = colorcheck_window()
        self.sharpness_window = sharpness_window()
        self.dxo_dead_leaves = dxo_dead_leaves_window()
        # Button Event
        self.pushButton[0].clicked.connect(self.fft_window.showMaximized)
        self.pushButton[1].clicked.connect(self.colorcheck_window.showMaximized)
        self.pushButton[2].clicked.connect(self.sharpness_window.showMaximized)
        self.pushButton[3].clicked.connect(self.dxo_dead_leaves.showMaximized)

        # self.pushButton[0].clicked.connect(self.show_fft_window)
        # self.pushButton[1].clicked.connect(self.show_colorcheck_window)
        # self.pushButton[2].clicked.connect(self.show_sharpness_window)
        # self.pushButton[3].clicked.connect(self.show_sharpness_window)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

    def show_fft_window(self):
        # self.fft_window = fft_window()
        fft_window().showMaximized()

    def show_colorcheck_window(self):
        # self.colorcheck_window = colorcheck_window()
        colorcheck_window().showMaximized()

    def show_sharpness_window(self):
        # self.sharpness_window = sharpness_window()
        sharpness_window().showMaximized()

    def show_dxo_dead_leaves_window(self):
        dxo_dead_leaves_window().showMaximized()


if __name__ == "__main__":
    import sys
    # 高分辨率屏幕自適應
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
